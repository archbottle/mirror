name: Mirror Docker Images to GHCR

on:
  push:
    branches:
    paths:
      - 'mirror-config.yaml'
      - '.github/workflows/mirror-images.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse config and mirror images
        run: |
          #!/bin/bash
          set -ex
          
          CONFIG_FILE="mirror-config.yaml"
          
          if [[ ! -f "$CONFIG_FILE" ]]; then
            echo "Configuration file $CONFIG_FILE not found!"
            exit 1
          fi
          
          # Get global settings
          RETRY_ATTEMPTS=$(yq '.settings.retry_attempts // 3' "$CONFIG_FILE")
          RETRY_DELAY=$(yq '.settings.retry_delay // 30' "$CONFIG_FILE")
          
          # Function to mirror a single image
          mirror_image() {
            local source="$1"
            local destination="$2"
            local tag="$3"
            local attempt=1
            
            # Replace template variables
            destination="${destination//\{\{GITHUB_REPOSITORY_OWNER\}\}/${{ github.repository_owner }}}"
            
            local source_full="${source}:${tag}"
            local dest_full="${destination}:${tag}"
            
            echo "Mirroring: $source_full â†’ $dest_full"
            
            while [[ $attempt -le $RETRY_ATTEMPTS ]]; do
              if skopeo copy \
                --dest-creds="${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" \
                "docker://$source_full" \
                "docker://$dest_full" >/dev/null 2>&1; then
                return 0
              else
                if [[ $attempt -lt $RETRY_ATTEMPTS ]]; then
                  sleep "$RETRY_DELAY"
                fi
                ((attempt++))
              fi
            done
            
            echo "Failed to mirror $source_full"
            return 1
          }
          
          # Get number of mirror configurations
          MIRROR_COUNT=$(yq '.mirrors | length' "$CONFIG_FILE")
          
          # Track failures
          FAILED_MIRRORS=0
          
          # Process each mirror configuration
          for i in $(seq 0 $((MIRROR_COUNT - 1))); do
            SOURCE=$(yq ".mirrors[$i].source" "$CONFIG_FILE")
            DESTINATION=$(yq ".mirrors[$i].destination" "$CONFIG_FILE")
            
            # Get tags for this mirror
            TAG_COUNT=$(yq ".mirrors[$i].tags | length" "$CONFIG_FILE")
            
            for j in $(seq 0 $((TAG_COUNT - 1))); do
              TAG=$(yq ".mirrors[$i].tags[$j]" "$CONFIG_FILE")
              
              if ! mirror_image "$SOURCE" "$DESTINATION" "$TAG"; then
                ((FAILED_MIRRORS++))
              fi
            done
          done
          
          if [[ $FAILED_MIRRORS -gt 0 ]]; then
            exit 1
          fi
